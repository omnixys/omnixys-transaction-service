name: Weekly Docker Push to GHCR

on:
  schedule:
    - cron: '0 3 * * 1'  # Jeden Montag um 03:00 UTC
  workflow_dispatch:  # Manuelles Triggern m√∂glich

permissions:
  contents: read
  id-token: write # ‚Üê WICHTIG f√ºr Cosign ohne Schl√ºssel (keyless signing)
  packages: write  # Notwendig f√ºr GHCR Push

env:
    COSIGN_EXPERIMENTAL: "true"
    IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}
    IMAGE_NAME_REPOSITORY: ghcr.io/${{ github.repository }}
    # IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ github.event.repository.name }}
jobs:
  sync-current-date:
        outputs:
            current_date: ${{ steps.set_date.outputs.CURRENT_DATE }}
        name: Sync CURRENT_DATE in GitHub Org
        runs-on: ubuntu-latest
        permissions:
          contents: read
        steps:

          - name: Set CURRENT_DATE
            id: set_date
            run: |
              DATE=$(date +'%Y-%m-%d')
              echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT

          - name: Update CURRENT_DATE in org variable
            env:
              GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Classic PAT mit org:admin
            run: |
              CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

              if [ -z "$CURRENT_DATE" ]; then
                echo "‚ùå CURRENT_DATE ist leer!"
                exit 1
              fi

              ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)
              VAR_NAME="CURRENT_DATE"

              echo "üìÖ Neuer Wert f√ºr $VAR_NAME: $CURRENT_DATE"

              EXISTING=$(curl -s \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/orgs/$ORG_NAME/actions/variables/$VAR_NAME \
                | jq -r '.value')

              if [ "$EXISTING" != "$CURRENT_DATE" ]; then
                echo "üîÅ Aktualisiere $VAR_NAME von $EXISTING auf $CURRENT_DATE"
                curl -s -X PATCH \
                  -H "Authorization: Bearer $GH_TOKEN" \
                  -H "Accept: application/vnd.github+json" \
                  https://api.github.com/orgs/$ORG_NAME/actions/variables/$VAR_NAME \
                  -d "{\"value\": \"${CURRENT_DATE}\"}"
              else
                echo "‚úÖ CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
              fi

  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: sync-current-date
    env:
      CURRENT_DATE: ${{ needs.sync-current-date.outputs.current_date }}
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Docker Cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-

      - name: Build and Push Docker Image (GHCR)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.CURRENT_DATE }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache


      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign Docker Image with cosign (OIDC/GitHub)
        run: |
            cosign sign --yes --recursive ghcr.io/${{ env.IMAGE_NAME_REPOSITORY }}:${{ env.CURRENT_DATE }}
            cosign sign --yes --recursive ghcr.io/${{ env.IMAGE_NAME_REPOSITORY }}:latest
